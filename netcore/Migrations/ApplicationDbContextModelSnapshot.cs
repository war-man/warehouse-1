// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using netcore.Data;
using netcore.Models.Invent;
using System;

namespace netcore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("netcore.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("ApplicationUserRole");

                    b.Property<bool>("BranchRole");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<bool>("CustomerLineRole");

                    b.Property<bool>("CustomerRole");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("HomeRole");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<bool>("ProductRole");

                    b.Property<bool>("PurchaseOrderLineRole");

                    b.Property<bool>("PurchaseOrderRole");

                    b.Property<bool>("ReceivingLineRole");

                    b.Property<bool>("ReceivingRole");

                    b.Property<bool>("SalesOrderLineRole");

                    b.Property<bool>("SalesOrderRole");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("ShipmentLineRole");

                    b.Property<bool>("ShipmentRole");

                    b.Property<bool>("StockRole");

                    b.Property<bool>("TransferInLineRole");

                    b.Property<bool>("TransferInRole");

                    b.Property<bool>("TransferOrderLineRole");

                    b.Property<bool>("TransferOrderRole");

                    b.Property<bool>("TransferOutLineRole");

                    b.Property<bool>("TransferOutRole");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<bool>("VendorLineRole");

                    b.Property<bool>("VendorRole");

                    b.Property<bool>("WarehouseRole");

                    b.Property<bool>("isSuperAdmin");

                    b.Property<string>("profilePictureUrl");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("netcore.Models.Invent.Branch", b =>
                {
                    b.Property<string>("branchId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<string>("branchName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("city")
                        .HasMaxLength(30);

                    b.Property<string>("country")
                        .HasMaxLength(30);

                    b.Property<DateTime>("createdAt");

                    b.Property<string>("description")
                        .HasMaxLength(50);

                    b.Property<bool>("isDefaultBranch");

                    b.Property<string>("province")
                        .HasMaxLength(30);

                    b.Property<string>("street1")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("street2")
                        .HasMaxLength(50);

                    b.HasKey("branchId");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("netcore.Models.Invent.Customer", b =>
                {
                    b.Property<string>("customerId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<string>("HasChild");

                    b.Property<string>("city")
                        .HasMaxLength(30);

                    b.Property<string>("country")
                        .HasMaxLength(30);

                    b.Property<DateTime>("createdAt");

                    b.Property<string>("customerName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("description")
                        .HasMaxLength(50);

                    b.Property<string>("province")
                        .HasMaxLength(30);

                    b.Property<int>("size");

                    b.Property<string>("street1")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("street2")
                        .HasMaxLength(50);

                    b.HasKey("customerId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("netcore.Models.Invent.CustomerLine", b =>
                {
                    b.Property<string>("customerLineId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<DateTime>("createdAt");

                    b.Property<string>("customerId")
                        .HasMaxLength(38);

                    b.Property<string>("fax")
                        .HasMaxLength(20);

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("gender");

                    b.Property<string>("jobTitle")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("middleName")
                        .HasMaxLength(20);

                    b.Property<string>("mobilePhone")
                        .HasMaxLength(20);

                    b.Property<string>("nickName")
                        .HasMaxLength(20);

                    b.Property<string>("officePhone")
                        .HasMaxLength(20);

                    b.Property<string>("personalEmail")
                        .HasMaxLength(50);

                    b.Property<int>("salutation");

                    b.Property<string>("workEmail")
                        .HasMaxLength(50);

                    b.HasKey("customerLineId");

                    b.HasIndex("customerId");

                    b.ToTable("CustomerLine");
                });

            modelBuilder.Entity("netcore.Models.Invent.Product", b =>
                {
                    b.Property<string>("productId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<string>("barcode")
                        .HasMaxLength(50);

                    b.Property<DateTime>("createdAt");

                    b.Property<string>("description")
                        .HasMaxLength(50);

                    b.Property<string>("productCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("productName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("productType");

                    b.Property<string>("serialNumber")
                        .HasMaxLength(50);

                    b.Property<int>("uom");

                    b.HasKey("productId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("netcore.Models.Invent.PurchaseOrder", b =>
                {
                    b.Property<string>("purchaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<string>("HasChild");

                    b.Property<string>("branchId")
                        .IsRequired()
                        .HasMaxLength(38);

                    b.Property<DateTime>("createdAt");

                    b.Property<string>("deliveryAddress")
                        .HasMaxLength(50);

                    b.Property<DateTime>("deliveryDate");

                    b.Property<string>("description")
                        .HasMaxLength(100);

                    b.Property<string>("picInternal")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("picVendor")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTime>("poDate");

                    b.Property<string>("purchaseOrderNumber")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("purchaseOrderStatus");

                    b.Property<string>("purchaseReceiveNumber");

                    b.Property<string>("referenceNumberExternal")
                        .HasMaxLength(30);

                    b.Property<string>("referenceNumberInternal")
                        .HasMaxLength(30);

                    b.Property<int>("top");

                    b.Property<decimal>("totalDiscountAmount");

                    b.Property<decimal>("totalOrderAmount");

                    b.Property<string>("vendorId")
                        .IsRequired()
                        .HasMaxLength(38);

                    b.HasKey("purchaseOrderId");

                    b.HasIndex("branchId");

                    b.HasIndex("vendorId");

                    b.ToTable("PurchaseOrder");
                });

            modelBuilder.Entity("netcore.Models.Invent.PurchaseOrderLine", b =>
                {
                    b.Property<string>("purchaseOrderLineId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<DateTime>("createdAt");

                    b.Property<decimal>("discountAmount");

                    b.Property<decimal>("price");

                    b.Property<string>("productId")
                        .HasMaxLength(38);

                    b.Property<string>("purchaseOrderId")
                        .HasMaxLength(38);

                    b.Property<float>("qty");

                    b.Property<decimal>("totalAmount");

                    b.HasKey("purchaseOrderLineId");

                    b.HasIndex("productId");

                    b.HasIndex("purchaseOrderId");

                    b.ToTable("PurchaseOrderLine");
                });

            modelBuilder.Entity("netcore.Models.Invent.Receiving", b =>
                {
                    b.Property<string>("receivingId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<string>("HasChild");

                    b.Property<string>("branchId")
                        .HasMaxLength(38);

                    b.Property<DateTime>("createdAt");

                    b.Property<string>("purchaseOrderId")
                        .IsRequired()
                        .HasMaxLength(38);

                    b.Property<DateTime>("receivingDate");

                    b.Property<string>("receivingNumber")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("vendorDO")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("vendorId")
                        .HasMaxLength(38);

                    b.Property<string>("vendorInvoice")
                        .HasMaxLength(50);

                    b.Property<string>("warehouseId")
                        .IsRequired()
                        .HasMaxLength(38);

                    b.HasKey("receivingId");

                    b.HasIndex("branchId");

                    b.HasIndex("purchaseOrderId");

                    b.HasIndex("vendorId");

                    b.HasIndex("warehouseId");

                    b.ToTable("Receiving");
                });

            modelBuilder.Entity("netcore.Models.Invent.ReceivingLine", b =>
                {
                    b.Property<string>("receivingLineId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<string>("branchId")
                        .HasMaxLength(38);

                    b.Property<DateTime>("createdAt");

                    b.Property<string>("productId")
                        .HasMaxLength(38);

                    b.Property<float>("qty");

                    b.Property<float>("qtyInventory");

                    b.Property<float>("qtyReceive");

                    b.Property<string>("receivingId")
                        .HasMaxLength(38);

                    b.Property<string>("warehouseId")
                        .HasMaxLength(38);

                    b.HasKey("receivingLineId");

                    b.HasIndex("branchId");

                    b.HasIndex("productId");

                    b.HasIndex("receivingId");

                    b.HasIndex("warehouseId");

                    b.ToTable("ReceivingLine");
                });

            modelBuilder.Entity("netcore.Models.Invent.SalesOrder", b =>
                {
                    b.Property<string>("salesOrderId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<string>("HasChild");

                    b.Property<string>("branchId")
                        .IsRequired()
                        .HasMaxLength(38);

                    b.Property<DateTime>("createdAt");

                    b.Property<string>("customerId")
                        .IsRequired()
                        .HasMaxLength(38);

                    b.Property<string>("deliveryAddress")
                        .HasMaxLength(50);

                    b.Property<DateTime>("deliveryDate");

                    b.Property<string>("description")
                        .HasMaxLength(100);

                    b.Property<string>("picCustomer")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("picInternal")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("referenceNumberExternal")
                        .HasMaxLength(30);

                    b.Property<string>("referenceNumberInternal")
                        .HasMaxLength(30);

                    b.Property<string>("salesOrderNumber")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("salesOrderStatus");

                    b.Property<string>("salesShipmentNumber");

                    b.Property<DateTime>("soDate");

                    b.Property<int>("top");

                    b.Property<decimal>("totalDiscountAmount");

                    b.Property<decimal>("totalOrderAmount");

                    b.HasKey("salesOrderId");

                    b.HasIndex("branchId");

                    b.HasIndex("customerId");

                    b.ToTable("SalesOrder");
                });

            modelBuilder.Entity("netcore.Models.Invent.SalesOrderLine", b =>
                {
                    b.Property<string>("salesOrderLineId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<DateTime>("createdAt");

                    b.Property<decimal>("discountAmount");

                    b.Property<decimal>("price");

                    b.Property<string>("productId")
                        .HasMaxLength(38);

                    b.Property<float>("qty");

                    b.Property<string>("salesOrderId")
                        .HasMaxLength(38);

                    b.Property<decimal>("totalAmount");

                    b.HasKey("salesOrderLineId");

                    b.HasIndex("productId");

                    b.HasIndex("salesOrderId");

                    b.ToTable("SalesOrderLine");
                });

            modelBuilder.Entity("netcore.Models.Invent.Shipment", b =>
                {
                    b.Property<string>("shipmentId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<string>("HasChild");

                    b.Property<string>("branchId")
                        .HasMaxLength(38);

                    b.Property<DateTime>("createdAt");

                    b.Property<string>("customerId")
                        .HasMaxLength(38);

                    b.Property<string>("customerPO")
                        .HasMaxLength(50);

                    b.Property<int>("expeditionMode");

                    b.Property<int>("expeditionType");

                    b.Property<string>("invoice")
                        .HasMaxLength(50);

                    b.Property<string>("salesOrderId")
                        .IsRequired()
                        .HasMaxLength(38);

                    b.Property<DateTime>("shipmentDate");

                    b.Property<string>("shipmentNumber")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("warehouseId")
                        .IsRequired()
                        .HasMaxLength(38);

                    b.HasKey("shipmentId");

                    b.HasIndex("branchId");

                    b.HasIndex("customerId");

                    b.HasIndex("salesOrderId");

                    b.HasIndex("warehouseId");

                    b.ToTable("Shipment");
                });

            modelBuilder.Entity("netcore.Models.Invent.ShipmentLine", b =>
                {
                    b.Property<string>("shipmentLineId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<string>("branchId")
                        .HasMaxLength(38);

                    b.Property<DateTime>("createdAt");

                    b.Property<string>("productId")
                        .HasMaxLength(38);

                    b.Property<float>("qty");

                    b.Property<float>("qtyInventory");

                    b.Property<float>("qtyShipment");

                    b.Property<string>("shipmentId")
                        .HasMaxLength(38);

                    b.Property<string>("warehouseId")
                        .HasMaxLength(38);

                    b.HasKey("shipmentLineId");

                    b.HasIndex("branchId");

                    b.HasIndex("productId");

                    b.HasIndex("shipmentId");

                    b.HasIndex("warehouseId");

                    b.ToTable("ShipmentLine");
                });

            modelBuilder.Entity("netcore.Models.Invent.TransferIn", b =>
                {
                    b.Property<string>("transferInId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<string>("HasChild");

                    b.Property<string>("branchFrombranchId");

                    b.Property<string>("branchIdFrom")
                        .HasMaxLength(38);

                    b.Property<string>("branchIdTo")
                        .HasMaxLength(38);

                    b.Property<string>("branchTobranchId");

                    b.Property<DateTime>("createdAt");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("transferInDate");

                    b.Property<string>("transferInNumber")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("transferOrderId")
                        .IsRequired()
                        .HasMaxLength(38);

                    b.Property<string>("warehouseFromwarehouseId");

                    b.Property<string>("warehouseIdFrom")
                        .HasMaxLength(38);

                    b.Property<string>("warehouseIdTo")
                        .HasMaxLength(38);

                    b.Property<string>("warehouseTowarehouseId");

                    b.HasKey("transferInId");

                    b.HasIndex("branchFrombranchId");

                    b.HasIndex("branchTobranchId");

                    b.HasIndex("transferOrderId");

                    b.HasIndex("warehouseFromwarehouseId");

                    b.HasIndex("warehouseTowarehouseId");

                    b.ToTable("TransferIn");
                });

            modelBuilder.Entity("netcore.Models.Invent.TransferInLine", b =>
                {
                    b.Property<string>("transferInLineId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<DateTime>("createdAt");

                    b.Property<string>("productId")
                        .HasMaxLength(38);

                    b.Property<float>("qty");

                    b.Property<float>("qtyInventory");

                    b.Property<string>("transferInId")
                        .HasMaxLength(38);

                    b.HasKey("transferInLineId");

                    b.HasIndex("productId");

                    b.HasIndex("transferInId");

                    b.ToTable("TransferInLine");
                });

            modelBuilder.Entity("netcore.Models.Invent.TransferOrder", b =>
                {
                    b.Property<string>("transferOrderId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<string>("HasChild");

                    b.Property<string>("branchFrombranchId");

                    b.Property<string>("branchIdFrom")
                        .HasMaxLength(38);

                    b.Property<string>("branchIdTo")
                        .HasMaxLength(38);

                    b.Property<string>("branchTobranchId");

                    b.Property<DateTime>("createdAt");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("isIssued");

                    b.Property<bool>("isReceived");

                    b.Property<string>("picName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("transferOrderDate");

                    b.Property<string>("transferOrderNumber")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("transferOrderStatus");

                    b.Property<string>("warehouseFromwarehouseId");

                    b.Property<string>("warehouseIdFrom")
                        .HasMaxLength(38);

                    b.Property<string>("warehouseIdTo")
                        .HasMaxLength(38);

                    b.Property<string>("warehouseTowarehouseId");

                    b.HasKey("transferOrderId");

                    b.HasIndex("branchFrombranchId");

                    b.HasIndex("branchTobranchId");

                    b.HasIndex("warehouseFromwarehouseId");

                    b.HasIndex("warehouseTowarehouseId");

                    b.ToTable("TransferOrder");
                });

            modelBuilder.Entity("netcore.Models.Invent.TransferOrderLine", b =>
                {
                    b.Property<string>("transferOrderLineId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<DateTime>("createdAt");

                    b.Property<string>("productId")
                        .HasMaxLength(38);

                    b.Property<float>("qty");

                    b.Property<string>("transferOrderId")
                        .HasMaxLength(38);

                    b.HasKey("transferOrderLineId");

                    b.HasIndex("productId");

                    b.HasIndex("transferOrderId");

                    b.ToTable("TransferOrderLine");
                });

            modelBuilder.Entity("netcore.Models.Invent.TransferOut", b =>
                {
                    b.Property<string>("transferOutId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<string>("HasChild");

                    b.Property<string>("branchFrombranchId");

                    b.Property<string>("branchIdFrom")
                        .HasMaxLength(38);

                    b.Property<string>("branchIdTo")
                        .HasMaxLength(38);

                    b.Property<string>("branchTobranchId");

                    b.Property<DateTime>("createdAt");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("transferOrderId")
                        .IsRequired()
                        .HasMaxLength(38);

                    b.Property<DateTime>("transferOutDate");

                    b.Property<string>("transferOutNumber")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("warehouseFromwarehouseId");

                    b.Property<string>("warehouseIdFrom")
                        .HasMaxLength(38);

                    b.Property<string>("warehouseIdTo")
                        .HasMaxLength(38);

                    b.Property<string>("warehouseTowarehouseId");

                    b.HasKey("transferOutId");

                    b.HasIndex("branchFrombranchId");

                    b.HasIndex("branchTobranchId");

                    b.HasIndex("transferOrderId");

                    b.HasIndex("warehouseFromwarehouseId");

                    b.HasIndex("warehouseTowarehouseId");

                    b.ToTable("TransferOut");
                });

            modelBuilder.Entity("netcore.Models.Invent.TransferOutLine", b =>
                {
                    b.Property<string>("transferOutLineId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<DateTime>("createdAt");

                    b.Property<string>("productId")
                        .HasMaxLength(38);

                    b.Property<float>("qty");

                    b.Property<float>("qtyInventory");

                    b.Property<string>("transferOutId")
                        .HasMaxLength(38);

                    b.HasKey("transferOutLineId");

                    b.HasIndex("productId");

                    b.HasIndex("transferOutId");

                    b.ToTable("TransferOutLine");
                });

            modelBuilder.Entity("netcore.Models.Invent.Vendor", b =>
                {
                    b.Property<string>("vendorId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<string>("HasChild");

                    b.Property<string>("city")
                        .HasMaxLength(30);

                    b.Property<string>("country")
                        .HasMaxLength(30);

                    b.Property<DateTime>("createdAt");

                    b.Property<string>("description")
                        .HasMaxLength(50);

                    b.Property<string>("province")
                        .HasMaxLength(30);

                    b.Property<int>("size");

                    b.Property<string>("street1")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("street2")
                        .HasMaxLength(50);

                    b.Property<string>("vendorName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("vendorId");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("netcore.Models.Invent.VendorLine", b =>
                {
                    b.Property<string>("vendorLineId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<DateTime>("createdAt");

                    b.Property<string>("fax")
                        .HasMaxLength(20);

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("gender");

                    b.Property<string>("jobTitle")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("middleName")
                        .HasMaxLength(20);

                    b.Property<string>("mobilePhone")
                        .HasMaxLength(20);

                    b.Property<string>("nickName")
                        .HasMaxLength(20);

                    b.Property<string>("officePhone")
                        .HasMaxLength(20);

                    b.Property<string>("personalEmail")
                        .HasMaxLength(50);

                    b.Property<int>("salutation");

                    b.Property<string>("vendorId")
                        .HasMaxLength(38);

                    b.Property<string>("workEmail")
                        .HasMaxLength(50);

                    b.HasKey("vendorLineId");

                    b.HasIndex("vendorId");

                    b.ToTable("VendorLine");
                });

            modelBuilder.Entity("netcore.Models.Invent.Warehouse", b =>
                {
                    b.Property<string>("warehouseId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<string>("branchId")
                        .HasMaxLength(38);

                    b.Property<string>("city")
                        .HasMaxLength(30);

                    b.Property<string>("country")
                        .HasMaxLength(30);

                    b.Property<DateTime>("createdAt");

                    b.Property<string>("description")
                        .HasMaxLength(50);

                    b.Property<string>("province")
                        .HasMaxLength(30);

                    b.Property<string>("street1")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("street2")
                        .HasMaxLength(50);

                    b.Property<string>("warehouseName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("warehouseId");

                    b.HasIndex("branchId");

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("netcore.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("netcore.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("netcore.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("netcore.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("netcore.Models.Invent.CustomerLine", b =>
                {
                    b.HasOne("netcore.Models.Invent.Customer", "customer")
                        .WithMany("customerLine")
                        .HasForeignKey("customerId");
                });

            modelBuilder.Entity("netcore.Models.Invent.PurchaseOrder", b =>
                {
                    b.HasOne("netcore.Models.Invent.Branch", "branch")
                        .WithMany()
                        .HasForeignKey("branchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("netcore.Models.Invent.Vendor", "vendor")
                        .WithMany()
                        .HasForeignKey("vendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("netcore.Models.Invent.PurchaseOrderLine", b =>
                {
                    b.HasOne("netcore.Models.Invent.Product", "product")
                        .WithMany()
                        .HasForeignKey("productId");

                    b.HasOne("netcore.Models.Invent.PurchaseOrder", "purchaseOrder")
                        .WithMany("purchaseOrderLine")
                        .HasForeignKey("purchaseOrderId");
                });

            modelBuilder.Entity("netcore.Models.Invent.Receiving", b =>
                {
                    b.HasOne("netcore.Models.Invent.Branch", "branch")
                        .WithMany()
                        .HasForeignKey("branchId");

                    b.HasOne("netcore.Models.Invent.PurchaseOrder", "purchaseOrder")
                        .WithMany()
                        .HasForeignKey("purchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("netcore.Models.Invent.Vendor", "vendor")
                        .WithMany()
                        .HasForeignKey("vendorId");

                    b.HasOne("netcore.Models.Invent.Warehouse", "warehouse")
                        .WithMany()
                        .HasForeignKey("warehouseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("netcore.Models.Invent.ReceivingLine", b =>
                {
                    b.HasOne("netcore.Models.Invent.Branch", "branch")
                        .WithMany()
                        .HasForeignKey("branchId");

                    b.HasOne("netcore.Models.Invent.Product", "product")
                        .WithMany()
                        .HasForeignKey("productId");

                    b.HasOne("netcore.Models.Invent.Receiving", "receiving")
                        .WithMany("receivingLine")
                        .HasForeignKey("receivingId");

                    b.HasOne("netcore.Models.Invent.Warehouse", "warehouse")
                        .WithMany()
                        .HasForeignKey("warehouseId");
                });

            modelBuilder.Entity("netcore.Models.Invent.SalesOrder", b =>
                {
                    b.HasOne("netcore.Models.Invent.Branch", "branch")
                        .WithMany()
                        .HasForeignKey("branchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("netcore.Models.Invent.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("netcore.Models.Invent.SalesOrderLine", b =>
                {
                    b.HasOne("netcore.Models.Invent.Product", "product")
                        .WithMany()
                        .HasForeignKey("productId");

                    b.HasOne("netcore.Models.Invent.SalesOrder", "salesOrder")
                        .WithMany("salesOrderLine")
                        .HasForeignKey("salesOrderId");
                });

            modelBuilder.Entity("netcore.Models.Invent.Shipment", b =>
                {
                    b.HasOne("netcore.Models.Invent.Branch", "branch")
                        .WithMany()
                        .HasForeignKey("branchId");

                    b.HasOne("netcore.Models.Invent.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customerId");

                    b.HasOne("netcore.Models.Invent.SalesOrder", "salesOrder")
                        .WithMany()
                        .HasForeignKey("salesOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("netcore.Models.Invent.Warehouse", "warehouse")
                        .WithMany()
                        .HasForeignKey("warehouseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("netcore.Models.Invent.ShipmentLine", b =>
                {
                    b.HasOne("netcore.Models.Invent.Branch", "branch")
                        .WithMany()
                        .HasForeignKey("branchId");

                    b.HasOne("netcore.Models.Invent.Product", "product")
                        .WithMany()
                        .HasForeignKey("productId");

                    b.HasOne("netcore.Models.Invent.Shipment", "shipment")
                        .WithMany("shipmentLine")
                        .HasForeignKey("shipmentId");

                    b.HasOne("netcore.Models.Invent.Warehouse", "warehouse")
                        .WithMany()
                        .HasForeignKey("warehouseId");
                });

            modelBuilder.Entity("netcore.Models.Invent.TransferIn", b =>
                {
                    b.HasOne("netcore.Models.Invent.Branch", "branchFrom")
                        .WithMany()
                        .HasForeignKey("branchFrombranchId");

                    b.HasOne("netcore.Models.Invent.Branch", "branchTo")
                        .WithMany()
                        .HasForeignKey("branchTobranchId");

                    b.HasOne("netcore.Models.Invent.TransferOrder", "transferOrder")
                        .WithMany()
                        .HasForeignKey("transferOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("netcore.Models.Invent.Warehouse", "warehouseFrom")
                        .WithMany()
                        .HasForeignKey("warehouseFromwarehouseId");

                    b.HasOne("netcore.Models.Invent.Warehouse", "warehouseTo")
                        .WithMany()
                        .HasForeignKey("warehouseTowarehouseId");
                });

            modelBuilder.Entity("netcore.Models.Invent.TransferInLine", b =>
                {
                    b.HasOne("netcore.Models.Invent.Product", "product")
                        .WithMany()
                        .HasForeignKey("productId");

                    b.HasOne("netcore.Models.Invent.TransferIn", "transferIn")
                        .WithMany("transferInLine")
                        .HasForeignKey("transferInId");
                });

            modelBuilder.Entity("netcore.Models.Invent.TransferOrder", b =>
                {
                    b.HasOne("netcore.Models.Invent.Branch", "branchFrom")
                        .WithMany()
                        .HasForeignKey("branchFrombranchId");

                    b.HasOne("netcore.Models.Invent.Branch", "branchTo")
                        .WithMany()
                        .HasForeignKey("branchTobranchId");

                    b.HasOne("netcore.Models.Invent.Warehouse", "warehouseFrom")
                        .WithMany()
                        .HasForeignKey("warehouseFromwarehouseId");

                    b.HasOne("netcore.Models.Invent.Warehouse", "warehouseTo")
                        .WithMany()
                        .HasForeignKey("warehouseTowarehouseId");
                });

            modelBuilder.Entity("netcore.Models.Invent.TransferOrderLine", b =>
                {
                    b.HasOne("netcore.Models.Invent.Product", "product")
                        .WithMany()
                        .HasForeignKey("productId");

                    b.HasOne("netcore.Models.Invent.TransferOrder", "transferOrder")
                        .WithMany("transferOrderLine")
                        .HasForeignKey("transferOrderId");
                });

            modelBuilder.Entity("netcore.Models.Invent.TransferOut", b =>
                {
                    b.HasOne("netcore.Models.Invent.Branch", "branchFrom")
                        .WithMany()
                        .HasForeignKey("branchFrombranchId");

                    b.HasOne("netcore.Models.Invent.Branch", "branchTo")
                        .WithMany()
                        .HasForeignKey("branchTobranchId");

                    b.HasOne("netcore.Models.Invent.TransferOrder", "transferOrder")
                        .WithMany()
                        .HasForeignKey("transferOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("netcore.Models.Invent.Warehouse", "warehouseFrom")
                        .WithMany()
                        .HasForeignKey("warehouseFromwarehouseId");

                    b.HasOne("netcore.Models.Invent.Warehouse", "warehouseTo")
                        .WithMany()
                        .HasForeignKey("warehouseTowarehouseId");
                });

            modelBuilder.Entity("netcore.Models.Invent.TransferOutLine", b =>
                {
                    b.HasOne("netcore.Models.Invent.Product", "product")
                        .WithMany()
                        .HasForeignKey("productId");

                    b.HasOne("netcore.Models.Invent.TransferOut", "transferOut")
                        .WithMany("transferOutLine")
                        .HasForeignKey("transferOutId");
                });

            modelBuilder.Entity("netcore.Models.Invent.VendorLine", b =>
                {
                    b.HasOne("netcore.Models.Invent.Vendor", "vendor")
                        .WithMany("vendorLine")
                        .HasForeignKey("vendorId");
                });

            modelBuilder.Entity("netcore.Models.Invent.Warehouse", b =>
                {
                    b.HasOne("netcore.Models.Invent.Branch", "branch")
                        .WithMany()
                        .HasForeignKey("branchId");
                });
#pragma warning restore 612, 618
        }
    }
}
